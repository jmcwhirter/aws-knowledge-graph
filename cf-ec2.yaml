Description: Demo Template to create Neptune EC2 Client with gremlin and rdf4j console
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-14c5486b
    us-east-2:
      AMI: ami-922914f7
    us-west-2:
      AMI: ami-e251209a
    eu-west-1:
      AMI: ami-ca0135b3
    eu-west-2:
      AMI: ami-f976839e
    eu-central-1:
      AMI: ami-9a91b371
    us-west-1:
      AMI: ami-25110f45
    ap-southeast-2:
      AMI: ami-423bec20
    ap-southeast-1:
      AMI: ami-de90a5a2
    ap-south-1:
      AMI: ami-76d6f519
    ap-northeast-1:
      AMI: ami-92df37ed
    ap-northeast-2:
      AMI: ami-c10fa6af
    eu-north-1:
      AMI: ami-4abe3234
    sa-east-1:
      AMI: ami-3885d854
    eu-west-3:
      AMI: ami-969c2deb
    ap-northeast-3:
      AMI: ami-b4faf4c9
Parameters:
  EC2SSHKeyPairName:
    Description: >-
      Name of an existing EC2 KeyPair to enable SSH access to the instances.
      Required Input
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Must be the name of an existing EC2 KeyPair in same region.
  Env:
    Description: 'Environment tag, e.g. prod, nonprod.'
    Default: test
    Type: String
    AllowedPattern: '[a-z0-9]+'
    MaxLength: 15
  EC2ClientInstanceType:
    Description: EC2 client instance
    Type: String
    Default: r4.2xlarge
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  VPC:
    Description: Valid VPCId
    Type: 'AWS::EC2::VPC::Id'
    ConstraintDescription: Must be the name of an existing VPC in same region.
  Subnet:
    Description: Valid Subnet
    Type: 'AWS::EC2::Subnet::Id'
    ConstraintDescription: Must be the name of an existing Subnet in same region.
  NeptuneDBCluster:
    Description: Neptune DB Cluster Identifier
    Type: String
  NeptuneDBClusterEndpoint:
    Description: Neptune DB Cluster Endpoint
    Type: String
  NeptuneDBClusterPort:
    Description: Neptune DB Cluster Port
    Type: String
  NeptuneLoadFromS3IAMRoleArn:
    Description: Neptune Load From S3 IAM Role Arn
    Type: String
  NeptuneSG:
    Description: Neptune Security Group
    Type: String
  NeptuneClientSG:
    Description: Neptune Client Security Group
    Type: String
  NeptuneEC2InstanceProfile:
    Description: 'Neptune EC2 Instance Profile '
    Type: String
  NeptuneEC2ClientCustomizationScript:
    Description: Neptune EC2 client customization script
    Type: String
    Default: ''
  NeptuneEC2ClientExtraSG:
    Description: Neptune EC2 client custom SG
    Type: String
    Default: ''
  SetupGremlinConsole:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Setup Gremlin console.
  SetupRDF4JConsole:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Setup RDF4J console.
  AttachBulkloadIAMRoleToNeptuneCluster:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Attach Bulkload IAM role to cluster
Conditions:
  AddExtraSGPresent: !Not 
    - !Equals 
      - !Ref NeptuneEC2ClientExtraSG
      - ''
  SetupGremlinConsoleCondition: !Equals 
    - !Ref SetupGremlinConsole
    - 'true'
  SetupRDF4JConsoleCondition: !Equals 
    - !Ref SetupRDF4JConsole
    - 'true'
  AttachBulkloadIAMRoleToNeptuneClusterCondition: !Equals 
    - !Ref AttachBulkloadIAMRoleToNeptuneCluster
    - 'true'
Resources:
  NeptuneEC2ClientInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref EC2SSHKeyPairName
      InstanceType: !Ref EC2ClientInstanceType
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      IamInstanceProfile: !Ref NeptuneEC2InstanceProfile
      SubnetId: !Ref Subnet
      SecurityGroupIds:
        - !Ref NeptuneClientSG
        - !If 
          - AddExtraSGPresent
          - !Ref NeptuneEC2ClientExtraSG
          - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub 'Neptune-${Env}'
        - Key: StackId
          Value: !Sub '${AWS::StackName}'
        - Key: Stack
          Value: !Sub '${AWS::Region}-${AWS::StackName}'
        - Key: Application
          Value: NeptuneCloudformation
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - 'yum update -y '
            - |+

            - yum -y install java-1.8.0-devel
            - |+

            - yum -y remove java-1.7.0-openjdk
            - |+

            - cur_dir=$PWD
            - |+

            - cd /home/ec2-user/
            - |+

            - pip install --upgrade awscli
            - |+

            - !If 
              - AttachBulkloadIAMRoleToNeptuneClusterCondition
              - !Join 
                - ''
                - - 'aws neptune add-role-to-db-cluster '
                  - '--region '
                  - !Ref 'AWS::Region'
                  - ' --db-cluster-identifier '
                  - !Ref NeptuneDBCluster
                  - ' --role-arn '
                  - !Ref NeptuneLoadFromS3IAMRoleArn
                  - |+

              - !Ref 'AWS::NoValue'
            - |+

            - !If 
              - SetupGremlinConsoleCondition
              - !Join 
                - ''
                - - >-
                    wget
                    https://archive.apache.org/dist/tinkerpop/3.3.2/apache-tinkerpop-gremlin-console-3.3.2-bin.zip
                  - |+

                  - unzip apache-tinkerpop-gremlin-console-3.3.2-bin.zip
                  - |+

                  - rm apache-tinkerpop-gremlin-console-3.3.2-bin.zip
                  - |+

                  - cd apache-tinkerpop-gremlin-console-3.3.2/conf
                  - |+

                  - 'echo hosts: ['
                  - !Ref NeptuneDBClusterEndpoint
                  - '] >> neptune-remote.yaml'
                  - |+

                  - 'echo port: '
                  - !Ref NeptuneDBClusterPort
                  - ' >> neptune-remote.yaml'
                  - |+

                  - >-
                    echo serializer: { className:
                    org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0,
                    config: { serializeResultToString: true }}
                  - ' >> neptune-remote.yaml'
                  - |+

              - !Ref 'AWS::NoValue'
            - |+

            - cd /home/ec2-user
            - |+

            - !If 
              - SetupRDF4JConsoleCondition
              - !Join 
                - ''
                - - >-
                    wget
                    https://ftp.osuosl.org/pub/eclipse/rdf4j/eclipse-rdf4j-2.3.2-sdk.zip
                  - |+

                  - unzip eclipse-rdf4j-2.3.2-sdk.zip
                  - |+

                  - rm eclipse-rdf4j-2.3.2-sdk.zip
                  - |+

              - !Ref 'AWS::NoValue'
            - |+

            - !Ref NeptuneEC2ClientCustomizationScript
            - |+

            - cd $cur_dir
            - |+

            - |
              # Send signal to WaitHandle that the setup is completed
            - /opt/aws/bin/cfn-signal
            - ' -e 0'
            - ' '''
            - !Ref WaitHandle
            - ''''
            - |+

    Metadata:
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum: {}
  WaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  WaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: NeptuneEC2ClientInstance
    Properties:
      Handle: !Ref WaitHandle
      Timeout: '1200'
Outputs:
  EC2Client:
    Description: EC2 client Identifier
    Value: !Ref NeptuneEC2ClientInstance
  SSHAccess:
    Description: This is how you gain remote access to the EC2 client.
    Value: !Join 
      - ''
      - - ssh ec2-user@
        - !GetAtt 
          - NeptuneEC2ClientInstance
          - PublicIp
        - ' -i '
        - !Ref EC2SSHKeyPairName
        - .pem
  EC2SSHTunnelCommand:
    Description: >-
      Command to connect to the local web server on the EC2 in VPC, you create
      an SSH tunnel between your computer and the EC2 node. This is also known
      as port forwarding.
    Value: !Join 
      - ''
      - - ssh ec2-user@
        - !GetAtt 
          - NeptuneEC2ClientInstance
          - PublicIp
        - ' -i '
        - !Ref EC2SSHKeyPairName
        - '.pem -L localhost:8080:localhost:8080'
